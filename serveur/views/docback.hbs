<h1>{{title}}</h1>
<p>Ce petit serveur propose l'accès au jeu du Memory.</p>

<h2> Documentation partie serveur</h2>
<br />
<ul>
     <li><h3>Ressource pédagogique :</h3>  un support de cours NodeJS, Express, MongoDB qui permet au stagiaire de réaliser ce petit Framework à la manière d'un Workshop :<br/>
           <a href="Cours_Node_Express_Handlebars_Mongo.pdf">Cours_Node_Express_Handlebars_Mongo.pdf</a>
       </li>
    <li>
        <h3> Technologie Back-End : </h3>
        <ul>
            <li>Le moteur d'exécution est Node JS v12.18.4</li>
            <ul>
                <li>Node JS est utilisé ici avec le module "Express" pour la gestion des requêtes HTTP et la gestion des
                    routes.</li>
                <li>Cependant, on utilise ici un framework <a
                        href="https://www.github.com/Stephanux/Minismall">"MiniSmall"</a> : pour simplifier le
                    développement et la maintenance</li>
            </ul>
            <li>La base de données est une MongoDB : mongodb version v3.6.9.
            <li>L'application charge le module Mongoose pour la connexion à la base NoSQL.</li>
        </ul>
    </li>
    <li>
        <h3> Voyons plus en détail le Framework MiniSmall </h3>
    </li>
    <ul>
        <li>Le principe de ce Framework est celui d'un automate fini. On pourrait le voir comme un Orgue de
            Barbarie.<br />
            <ul>
            <li>En effet, nous avons un ensemble d'actions qui sont stockées dans un fichier JSON, que l'on peut comparer aux feuilles trouées de l'Orgue de barbarie.
            Pour ce dernier, les notes sont produites en fonction de la position du trou dans la feuille. L'automate qu'est l'Orgue de barbarie joue le morceau de musique
            décrit par l'ensemble des trous de la <b>"partition"</b>. En fait <b>"MiniSmall"</b> fonctionne de la même manière, le fichier annuaire d'actions <b>"config_actions.json"</b>
            est la feuille trouée et ici le <b>"dynamicRouteur.js"</b> est l'Orgue de Barbarie, il réalise les actions demandées (configurées) dans le fichier annuaire.
            On l'appelle l'Annuaire des actions et le fichier se nomme "<b>routes/config_actions.json"</b>.</li>
            </ul>
        </li>
        <li>Regardons l'arborescence du côté Back-End de notre projet de jeu Memory dans le dossier "serveur":<br /><br /><img src="/images/docback_arbo.png" alt="arborescence projet MiniSmall" /></li>
        <li>Nous allons également voir un schéma qui détaille une requête HTTP pour afficher l'écran du jeu de Memory.<br /><br /><img src="images/docback_http_request.png" alt="schéma d'une requête http dans l'application" /></li>
        <li>L'accès à la base de données se fait dans les fichiers "contrôleurs" qui se trouvent dans le répertoire routes.<br /> Le principe du framework ici est de proposer des modules (classes) génériques qui réalisent les princpaux accès à une base de données :</li>
        <ul>
            <li>La sélection de données (toutes ou filtrées)</li>
            <li>La mise à jour des données</li>
            <li>L'insertion de données</li>
            <li>La suppression de données</li>
        </ul>
        <li>Dans notre application de Memory, l'action du menu "Jeu Memory" est à l'origine d'une requête HTTP dont la méthode est "GET"<br />
            et l'action, aussi appelée "pathname" est "/memory". Cela permet d'afficher l'interface du jeu où l'on peut sélectionner le<br />
            format de la grille de jeu. Mais elle affiche aussi le classement des scores par format de grille dans un tableau à droite.<br />
            Pour ce faire, il faut que l'on fasse une requête dans la base de données MongoDB et que l'on affiche les données sous la forme d'un tableau.
        </li>
        <ul>
            <li>L'annuaire d'actions : routes/config_actions.json</li><br />
            <div id="editor1_wrapper" class="app_editor_wrapper">
                <div id="editor1" class="app_editor">{
    "GET/": {
        "controler": "getView",
        "view": "index",
        "title": "Bienvenue sur la page Recrutement formateur Full Stack pour O'Clock."
    },
    "GET/index": {
        "controler": "getView",
        "view": "index",
        "title": "Bienvenue sur la page Recrutement formateur Full Stack pour O'Clock."
    },
    "GET/memory": {
        "controler": "finder",
        "view": "memory",
        "modelName": "Memory",
        "sortfield": "score",
        "order": 0,
        "title": "It's thirteen O'Clock, time to make a MEMORY !"
    },
    "GET/setmemscore": {
        "controler": "insertOne",
        "modelName": "Memory",
        "view": "memory",
        "redirect": "/memory",
        "return_type": "application/json"
    },
    "GET/docihm": {
        "controler": "getView",
        "view": "docihm",
        "title": "Etude et analyse du code du jeu : l'IHM."
    },
    "GET/docback": {
        "controler": "getView",
        "view": "docback",
        "title": "Etude et analyse du code du jeu : Back-End."
    }
}
                </div>
                <div id="editor1_dragbar" class="app_editor_dragbar"></div>
            </div><br/>
            <li>On retrouve dans l'annuaire <b>"config_actions.json"</b> ci-dessus, le code qui permet de répondre à la requête HTTP <b>"GET/memory"</b>.<br/>
                On voit ici que le contrôleur défini pour répondre à la requête est <b>"finder"</b>.<br/>
                On retrouve dans le dossier <b>"routes"</b> le fichier <b>"finder.js"</b> qui sera chargé et exécuté lorsque cette requête sera effectuée par un client.<br/><br/>
                <div id="editor2_wrapper" class="app_editor_wrapper">
                <div id="editor2" class="app_editor">
var express = require('express');
var router = express.Router();

/* GET users listing. */
router.get('/', function (req, res, next) {
    /*if ((req.session.passport) && (req.session.passport.user != null)) {*/
        if (global.actions_json[req.message.action].sortfield) var sortedfield = global.actions_json[req.message.action].sortfield;
        global.schemas[req.message.modelName].find({}).sort(sortedfield).lean().exec( function (err, result) {
            if (err) {
                throw err;
            }
            console.log("connexion depuis Finder : ", result);
            if (req.message.return_type == null) {
                res.render(req.message.view, {
                    stitle: 'First Cnx Mongo',
                    title: req.message.title,
                    libelle: req.message.libelle,
                    del_label: req.message.del_label,
                    form_action: req.message.form_action,
                    data: result  // Attention a renvoyer une variable avec un nom generique
                });
                //}

            } else {
                res.setHeader('content-type', 'application/json');
                res.send(result);
            }
        });
  /*  } else {
        res.redirect('/');  // affichage boîte de login si pas authentifié
    }*/
});

module.exports = router;
                </div>
                <div id="editor2_dragbar" class="app_editor_dragbar"></div>
            </div><br/>
            </li>
            <li>Voici un extrait de code du contrôleur <b>"finder.js"</b> et plus particulièrement la fonction get(...) qui répond à la demande <b>"GET/memory"</b>.<br/>
                La ligne importante ici pour l'exécution de la requête est : <br/><br/>
                <pre><b>global.schemas[req.message.modelName].find({}).sort(sortedfield).lean().exec( function (err, result) { ...</b></pre><br/>
                Ici on récupère l'instance du schéma <b>"Mongoose"</b> stocké dans le fichier <b>"database_schema.json"</b>, fichier lu au démarrage de l'application dans le fichier <b>"appdyn.js"</b>.<br/>
                Voici un extrait du fichier de description des <b>"Schémas"</b> (collections) de la base de données MongoDB : <br/><br/>
                <div id="editor3_wrapper" class="app_editor_wrapper">
                <div id="editor3" class="app_editor">
{
	"Countries" : {
		"collection" : "countries",
		"schema": {
        	"_id": "ObjectId",
	    	"code": "String",
	    	"name": "String"
    	}
    },
    "Memory": {
        "collection": "memory",
        "schema": {
            "_id": "ObjectId",
            "nickname": "String",
            "format": "String",
            "score": "Number"
        }
    },
    "Users": {
        "collection": "users",
        "schema": {
            "_id": "ObjectId",
            "name": "String",
            "firstName": "String",
            "login": "String",
            "mdp": "String",
            "function": "String",
            "office": "String",
            "date_naiss": "String",
            "adresse1": "String",
            "adresse2": "String",
            "cp": "String",
            "city": "String",
            "country": {
                "type": "ObjectId",
                "ref": "Countries"
            },
            "mobile_phone": "String",
            "home_phone": "String"
        }
    }
}
                </div>
                <div id="editor3_dragbar" class="app_editor_dragbar"></div>
            </div><br/>
            </li>
            <li>Nous utilisons ici le schéma <b>"Memory"</b> pour construire dans le module <b>"appdyn.js"</b> une instance d'un <b>"Model"</b> Mongoose.<br/>
                Voici le code dans le fichier <b>"appdyn.js"</b> :<br/><br/>
                <pre><b><i>// Connexion à MongoDB depuis Mongoose</i>
global.schemas = {};
var mongoose = require('mongoose');
mongoose.connect(config.mongoose.url, { useNewUrlParser: true, useUnifiedTopology: true }, function (err) {
  if (err) {
    throw err;
  } else console.log('Connected Mongoose');
});

<i>// chargement des schémas depuis le fichier de configuration JSON dans une variable</i>
var database_schemas = JSON.parse(fs.readFileSync("database_schema.json", 'utf8'));
<i>// Initialisation de chaque schéma par association entre le schéma et la collection</i>
for (modelName in database_schemas) {
  global.schemas[modelName] = mongoose.model(modelName, database_schemas[modelName].schema,
    database_schemas[modelName].collection);
}</b></pre><br/>
            </li>
            <li> Dans le premier paragraphe, on utilise une variable globale du fichier de configuration générale <b>"config_minismall.json"</b> : <b>"config.mongoose.url"</b><br/>
                pour récupérer l'URL de connexion à la base de données.<br/>
                Dans le deuxième paragraphe, on charge le fichier <b>"database_schemas.json"</b>, et pour chaque nom de modèle <b>"modelName"</b> on associe la <b>collection</b><br/> au schéma via
                la fonction Mongoose <b>"mongoose.model(modelName, schema, collection)"</b> qui stocke dans un objet global <b>"schemas"</b> que l'on pourra utiliser dans les <b>"contrôleurs"</b>
                pour réaliser les requêtes sur la base MongoDB.
            </li>
            <li>Voyons maintenant le code du coeur du framework MiniSMall, le <b>"dynamicRouteur.js"</b>. Il récupère les données de la requête et construit un objet <b>Message</b> qu'il accroche à l'objet <b>"req"</b> défini par Express
                et il charge le <b>"contrôleur"</b> que le développeur a défini dans l'annuaire d'actions (<b>"config_actions.json"</b>) puis l'appelle pour réaliser le traitement.
                <br/><br/>
                <div id="editor4_wrapper" class="app_editor_wrapper">
                <div id="editor4" class="app_editor">
var express = require("express");
var router = express.Router();
var appContext;
var url = require("url");

function dynamicRouter(app) {
    //-- Context applicatif
    appContext = app;
    // -- Perform Automate action
    router.use(manageAction);
    // -- routeur global
    appContext.use(router);
}

/* Fonction qui permet d'aguiller les requêtes HTTP 
vers le bon contrôleur en fonction de l'action du pathname  */
function manageAction(req, res, next) {
    req.message = {};
    var path = req.originalUrl; // Le pathname après le port 3000 dans l'URL.
    if (path.includes("?")) {
        path = path.split('?')[0];
    }
    else if (path.split('/').length > 0) path = '/' + path.split('/')[1]
    var type = req.method;
    // On défini la clé de l'annuaire config_actions.json dans une variable "action"
    req.message.action = type + path;
    // On défini ici le nom du contrôler à charger pour faire le traitement de l'action
    if (global.actions_json[req.message.action].controler != null) { // nom du contrôleur à charger
        req.message.controler = global.actions_json[req.message.action].controler;
    }
    // Pour une connexion à la base mongoDB via Mongoose, récupération du nom du modèle Mongoose
    if (global.actions_json[req.message.action].modelName != null) {
        req.message.modelName = global.actions_json[req.message.action].modelName;
    }
    // On défini ici la vue pour le rendu des données sur l'Interface de l'application
    if (global.actions_json[req.message.action].view != null) {
        req.message.view = global.actions_json[req.message.action].view;
    }
    // On défini ici la type du format des données en retour, cela implique que l'on utilisera pas la vue
    if (global.actions_json[req.message.action].return_type != null) {
        req.message.return_type = global.actions_json[req.message.action].return_type;
    }
    // On défini ici le champ sur lequel sera fait le Tri
    if (global.actions_json[req.message.action].sortfield != null) {
        req.message.sortfield = global.actions_json[req.message.action].sortfield;
    }
    // On défini ici le champ d'ordre de Tri "-1" : descendant / "0" : ascendant
    if (global.actions_json[req.message.action].order != null) {
        req.message.order = global.actions_json[req.message.action].order;
    }
    // On défini ici la clé externe de la collection pour faire un populate
    if (global.actions_json[req.message.action].pop_ref != null) {
        req.message.pop_ref = global.actions_json[req.message.action].pop_ref;
    }
    // On défini ici la liste des Modèles de Mongoose sur lesquels il faut faire une requête all
    if (global.actions_json[req.message.action].modelList != null) {
        req.message.modelList = global.actions_json[req.message.action].modelList;
    }
    // On défini ici la requête SQL qui sera exécuter par le "controler"
    if (global.actions_json[req.message.action].sql_query != null) {
        req.message.sql_query = global.actions_json[req.message.action].sql_query;
    }
    // On défini ici les paramètres pour une requête SQL INSERT qui sera construite dans le contrôleur insertSQL */
    if (global.actions_json[req.message.action].params_query != null) {
        req.message.params_query = global.actions_json[req.message.action].params_query;
    }
    // On défini ici la chaîne de caratères title pour un affichage dan la vue
    if (global.actions_json[req.message.action].title != null) {
        req.message.title = global.actions_json[req.message.action].title;
    }
    // On défini ici l'action du formulaire pour le placer dans l'attribut "action=" de la balise "<form>"
    if (global.actions_json[req.message.action].form_action != null) {
        req.message.form_action = global.actions_json[req.message.action].form_action;
    }
    // On défini ici un libelle qui peut être utilisé dans un formulaire (sur un bouton par exemple)
    if (global.actions_json[req.message.action].libelle != null) {
        req.message.libelle = global.actions_json[req.message.action].libelle;
    }
    // On défini ici le label du  bouton delete du formulaire
    if (global.actions_json[req.message.action].del_label != null) {
        req.message.del_label = global.actions_json[req.message.action].del_label;
    }
    // On définit ici l'action vers laquelle on veut rediriger l'affichage
    if (global.actions_json[req.message.action].redirect != null) {
        req.message.redirect = global.actions_json[req.message.action].redirect;
    }
    // (...) Il est possible ici d'ajouter des variables à l'annuaire config_actions.json 
    // en fonction des besoins du développeur

    // Si l'action n'est pas définie dans l'annuaire, on log l'erreur
    if (typeof global.actions_json[req.message.action] == 'undefined') {
        console.log("Erreur: Pas d'action dans l'annuaire config_actions.json : " + path);
        next();
    }
    else {
        instanceModule = require('./routes/' + req.message.controler);
        router.use(path, instanceModule);
        next();
    }
}

module.exports = dynamicRouter;
                </div>
                <div id="editor4_dragbar" class="app_editor_dragbar"></div>
            </div><br/>
            </li>
       </ul>
    </ul>
</ul>

<script>

var aceEditorInstance = ace.edit( "editor1" );
aceEditorInstance.setReadOnly(true)
aceEditorInstance.setTheme("ace/theme/dracula");
aceEditorInstance.getSession().setMode( { path: "ace/mode/json", inline: true } );

var aceEditorInstance2 = ace.edit( "editor2" );
aceEditorInstance2.setReadOnly(true)
aceEditorInstance2.setTheme("ace/theme/dracula");
aceEditorInstance2.getSession().setMode( { path: "ace/mode/javascript", inline: true } );

var aceEditorInstance3 = ace.edit( "editor3" );
aceEditorInstance3.setReadOnly(true)
aceEditorInstance3.setTheme("ace/theme/dracula");
aceEditorInstance3.getSession().setMode( { path: "ace/mode/json", inline: true } );

var aceEditorInstance4 = ace.edit( "editor4" );
aceEditorInstance4.setReadOnly(true)
aceEditorInstance4.setTheme("ace/theme/dracula");
aceEditorInstance4.getSession().setMode( { path: "ace/mode/javascript", inline: true } );

makeAceEditorResizable(aceEditorInstance);
makeAceEditorResizable(aceEditorInstance2);
makeAceEditorResizable(aceEditorInstance3);
makeAceEditorResizable(aceEditorInstance4);


</script>
<!--img src="images/docback.png" /-->
<br/><br/><br/><br/><br/><br/>